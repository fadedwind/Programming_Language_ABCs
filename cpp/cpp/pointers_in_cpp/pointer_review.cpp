#include <iostream>
using namespace std;
int foo(int *p) { // 指针作为形式参数，里面是用来传地址的
    (*p) += 10;return *p;
}
int main () {
    int num1 = 20;
    int *p = &num1;
    int num2 = foo(p);
    cout << num1 << num2 << endl;
    return 0;}// *p 是指向的东西, p 是地址
// 指针是一个变量，其存储的值是另一个变量的内存地址。通过使用指针，我们可以直接访问和操作内存中的数据。
//以下是指针在 C++ 中常见的用法：

// 变量地址获取：使用取地址运算符 & 可以获取变量的内存地址，将其赋值给指针变量。
// 例如：int* ptr = &num; 将 num 的地址赋给指针 ptr。

// 指针变量声明和初始化：指针变量的声明需要指定所指向的数据类型。
// 例如：int* ptr; 声明了一个指向整数类型的指针。

// 指针解引用：使用解引用运算符 * 可以访问指针所指向的变量或对象。
// 例如：int value = *ptr; 将指针 ptr 所指向的值赋给 value。

// 动态内存分配：通过使用 new 运算符可以在运行时动态地分配内存空间，返回所分配内存的地址，并将其赋给指针变量。
// 例如：int* ptr = new (int); 在堆上分配一个整数的内存空间，并将其地址赋给指针 ptr。

// 指针数组和指向数组的指针：指针可以用于处理数组。可以声明指向数组的指针，也可以创建指针数组。
// 例如：int* ptrArray[5]; 声明了一个包含 5 个指针元素的数组。

// 函数指针：指针可以指向函数，这样可以通过指针来调用函数。
// 例如：void (*funcPtr)(); 声明了一个指向不带参数且返回类型为 void 的函数的指针。

// 指针算术：指针可以进行算术运算，如指针的加法、减法、递增和递减等操作。这些操作是基于指针所指向的数据类型的大小进行计算。
// 指针是 C++ 中强大且灵活的工具，它们允许直接访问内存和处理复杂的数据结构。



